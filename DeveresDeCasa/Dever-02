{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNg8AG8NZqz/ifZRB1rMAbY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Paola-Steh/Aprendizagem-de-Maquina/blob/main/DeveresDeCasa/Dever-02\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4J0JtN6wjFFN"
      },
      "outputs": [],
      "source": [
        "import csv\n",
        "\n",
        "\n",
        "data = [\n",
        "    [\"Nome\", \"dataNasc\", \"dataCadastrado\", \"horaCadastro\"],\n",
        "    [\"Pablo Coelho\", \"26/01/1974\", \"2025/02/17\", \"20:30\"],\n",
        "    [\"Mariana Ferreira\", \"26/04/1995\", \"2025/02/17\", \"20:31\"],\n",
        "    [\"João Silva\", \"15/07/1988\", \"2025/02/18\", \"10:15\"],\n",
        "    [\"Ana Souza\", \"03/12/2001\", \"2025/02/18\", \"14:45\"],\n",
        "    [\"Pedro Santos\", \"22/09/1965\", \"2025/02/19\", \"08:00\"],\n",
        "]\n",
        "\n",
        "\n",
        "with open(\"dados.csv\", \"w\", newline=\"\") as csvfile:\n",
        "    writer = csv.writer(csvfile)\n",
        "    writer.writerows(data)\n",
        "\n",
        "\n",
        "print(\"Arquivo CSV 'dados.csv' criado com sucesso!\")\n",
        "\n",
        "\n",
        "import csv\n",
        "from datetime import datetime\n",
        "\n",
        "\n",
        "def formatar_data(data, formato_original, formato_desejado):\n",
        "    \"\"\"Formata uma data para o padrão desejado.\"\"\"\n",
        "    data_obj = datetime.strptime(data, formato_original)\n",
        "    return data_obj.strftime(formato_desejado)\n",
        "\n",
        "\n",
        "def imprimir_registro(nome_arquivo, numero_registro):\n",
        "    \"\"\"Lê o arquivo CSV e imprime o registro formatado.\"\"\"\n",
        "    with open(nome_arquivo, \"r\") as csvfile:\n",
        "        reader = csv.reader(csvfile)\n",
        "        next(reader)  # Ignora o cabeçalho\n",
        "        for i, linha in enumerate(reader):\n",
        "            if i == numero_registro - 1:\n",
        "                nome = linha[0]\n",
        "                data_nascimento = formatar_data(linha[1], \"%d/%m/%Y\", \"%d/%m/%Y\") #correção aqui, caso o csv tenha data no formato dd/mm/aaaa\n",
        "                data_cadastro = formatar_data(linha[2], \"%Y/%m/%d\", \"%d/%m/%Y\")\n",
        "                hora_cadastro = linha[3]\n",
        "                print(f\"Registro {numero_registro}: Nome: {nome}; Data de nascimento: {data_nascimento}; Data de cadastro: {data_cadastro} as {hora_cadastro} horas\")\n",
        "                return\n",
        "        print(f\"Registro {numero_registro} não encontrado.\")\n",
        "\n",
        "\n",
        "# Solicita o número do registro ao usuário\n",
        "numero_registro = int(input(\"Digite o número do registro desejado (1-5): \"))\n",
        "\n",
        "\n",
        "# Imprime o registro formatado\n",
        "imprimir_registro(\"dados.csv\", numero_registro)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def entrada_valida(mensagem):\n",
        "    \"\"\"\n",
        "    Solicita ao usuário que insira uma frase e verifica se a entrada não está vazia.\n",
        "\n",
        "    Args:\n",
        "        mensagem (str): A mensagem a ser exibida para o usuário.\n",
        "\n",
        "    Returns:\n",
        "        str: A frase inserida pelo usuário.\n",
        "\n",
        "    Raises:\n",
        "        ValueError: Se a entrada do usuário estiver vazia.\n",
        "    \"\"\"\n",
        "    frase = input(mensagem).strip()\n",
        "    if not frase:\n",
        "        raise ValueError(\"A entrada não pode estar vazia.\")\n",
        "    return frase\n",
        "\n",
        "def analisar_frase(frase):\n",
        "    \"\"\"\n",
        "    Realiza a análise da frase, incluindo contagem de caracteres, palavras e identificação da maior palavra.\n",
        "\n",
        "    Args:\n",
        "        frase (str): A frase a ser analisada.\n",
        "\n",
        "    Returns:\n",
        "        tuple: Uma tupla contendo o número de caracteres, número de palavras e a maior palavra.\n",
        "    \"\"\"\n",
        "    num_caracteres = len(frase)\n",
        "    palavras = frase.split()\n",
        "    num_palavras = len(palavras)\n",
        "    maior_palavra = max(palavras, key=len) if palavras else \"\"\n",
        "    return num_caracteres, num_palavras, maior_palavra\n",
        "\n",
        "def manipular_frase(frase):\n",
        "    \"\"\"\n",
        "    Realiza a manipulação e formatação da frase, incluindo inversão, alteração de caixa e criação de tupla de palavras.\n",
        "\n",
        "    Args:\n",
        "        frase (str): A frase a ser manipulada.\n",
        "\n",
        "    Returns:\n",
        "        tuple: Uma tupla contendo a frase invertida (caracteres), frase invertida (palavras), frase em maiúsculas, frase em minúsculas e tupla de palavras.\n",
        "    \"\"\"\n",
        "    inversao_caracteres = frase[::-1]\n",
        "    inversao_palavras = \" \".join(frase.split()[::-1])\n",
        "    maiusculas = frase.upper()\n",
        "    minusculas = frase.lower()\n",
        "    tupla_palavras = tuple(frase.split())\n",
        "    return inversao_caracteres, inversao_palavras, maiusculas, minusculas, tupla_palavras\n",
        "\n",
        "def exibir_resultados(num_caracteres, num_palavras, maior_palavra, inversao_caracteres, inversao_palavras, maiusculas, minusculas, tupla_palavras):\n",
        "    \"\"\"\n",
        "    Exibe os resultados da análise e manipulação da frase de forma formatada.\n",
        "\n",
        "    Args:\n",
        "        num_caracteres (int): Número de caracteres da frase.\n",
        "        num_palavras (int): Número de palavras da frase.\n",
        "        maior_palavra (str): A maior palavra da frase.\n",
        "        inversao_caracteres (str): A frase invertida por caracteres.\n",
        "        inversao_palavras (str): A frase invertida por palavras.\n",
        "        maiusculas (str): A frase em maiúsculas.\n",
        "        minusculas (str): A frase em minúsculas.\n",
        "        tupla_palavras (tuple): A tupla de palavras da frase.\n",
        "    \"\"\"\n",
        "    print(f\"Número de caracteres: {num_caracteres}\")\n",
        "    print(f\"Número de palavras: {num_palavras}\")\n",
        "    print(f\"Maior palavra: {maior_palavra}\")\n",
        "    print(f\"Frase invertida (caracteres): {inversao_caracteres}\")\n",
        "    print(f\"Frase invertida (palavras): {inversao_palavras}\")\n",
        "    print(f\"Frase em maiúsculas: {maiusculas}\")\n",
        "    print(f\"Frase em minúsculas: {minusculas}\")\n",
        "    print(f\"Tupla de palavras: {tupla_palavras}\")\n",
        "\n",
        "# Bloco principal\n",
        "try:\n",
        "    frase = entrada_valida(\"Digite uma frase: \")\n",
        "    num_caracteres, num_palavras, maior_palavra = analisar_frase(frase)\n",
        "    inversao_caracteres, inversao_palavras, maiusculas, minusculas, tupla_palavras = manipular_frase(frase)\n",
        "    exibir_resultados(num_caracteres, num_palavras, maior_palavra, inversao_caracteres, inversao_palavras, maiusculas, minusculas, tupla_palavras)\n",
        "except ValueError as e:\n",
        "    print(f\"Erro: {e}\")\n",
        "\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yWmMtALXmKMH",
        "outputId": "f0066f42-5580-49a0-95dc-32083f439b2f"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite uma frase: oi\n",
            "Número de caracteres: 2\n",
            "Número de palavras: 1\n",
            "Maior palavra: oi\n",
            "Frase invertida (caracteres): io\n",
            "Frase invertida (palavras): oi\n",
            "Frase em maiúsculas: OI\n",
            "Frase em minúsculas: oi\n",
            "Tupla de palavras: ('oi',)\n"
          ]
        }
      ]
    }
  ]
}